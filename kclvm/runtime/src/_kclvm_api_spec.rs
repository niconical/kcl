// Copyright 2023 The KCL Authors. All rights reserved.

// Auto generated by <make gen-api-spec> command, DONOT EDIT!!!

// api-spec:       kclvm_buffer_new
// api-spec(c):    kclvm_buffer_t* kclvm_buffer_new(kclvm_size_t size);
// api-spec(llvm): declare %kclvm_buffer_t* @kclvm_buffer_new(%kclvm_size_t %size);

// api-spec:       kclvm_buffer_delete
// api-spec(c):    void kclvm_buffer_delete(kclvm_buffer_t* p);
// api-spec(llvm): declare void @kclvm_buffer_delete(%kclvm_buffer_t* %p);

// api-spec:       kclvm_buffer_size
// api-spec(c):    kclvm_size_t kclvm_buffer_size(kclvm_buffer_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_buffer_size(%kclvm_buffer_t* %p);

// api-spec:       kclvm_buffer_data
// api-spec(c):    kclvm_char_t* kclvm_buffer_data(kclvm_buffer_t* p);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_buffer_data(%kclvm_buffer_t* %p);

// api-spec:       kclvm_malloc
// api-spec(c):    uint8_t* kclvm_malloc(int32_t n);
// api-spec(llvm): declare i8* @kclvm_malloc(i32 %n);

// api-spec:       kclvm_free
// api-spec(c):    void kclvm_free(uint8_t* ptr);
// api-spec(llvm): declare void @kclvm_free(i8* %ptr);

// api-spec:       kclvm_strlen
// api-spec(c):    kclvm_size_t kclvm_strlen(uint8_t* ptr);
// api-spec(llvm): declare %kclvm_size_t @kclvm_strlen(i8* %ptr);

// api-spec:       kclvm_context_current
// api-spec(c):    kclvm_context_t* kclvm_context_current();
// api-spec(llvm): declare %kclvm_context_t* @kclvm_context_current();

// api-spec:       kclvm_context_new
// api-spec(c):    kclvm_context_t* kclvm_context_new();
// api-spec(llvm): declare %kclvm_context_t* @kclvm_context_new();

// api-spec:       kclvm_context_delete
// api-spec(c):    void kclvm_context_delete(kclvm_context_t* p);
// api-spec(llvm): declare void @kclvm_context_delete(%kclvm_context_t* %p);

// api-spec:       kclvm_context_main_begin_hook
// api-spec(c):    void kclvm_context_main_begin_hook(kclvm_context_t* p);
// api-spec(llvm): declare void @kclvm_context_main_begin_hook(%kclvm_context_t* %p);

// api-spec:       kclvm_context_main_end_hook
// api-spec(c):    kclvm_value_ref_t* kclvm_context_main_end_hook(kclvm_context_t* p, kclvm_value_ref_t* return_value);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_context_main_end_hook(%kclvm_context_t* %p, %kclvm_value_ref_t* %return_value);

// api-spec:       kclvm_context_set_kcl_location
// api-spec(c):    void kclvm_context_set_kcl_location(kclvm_context_t* p, int8_t* filename, int32_t line, int32_t col);
// api-spec(llvm): declare void @kclvm_context_set_kcl_location(%kclvm_context_t* %p, i8* %filename, i32 %line, i32 %col);

// api-spec:       kclvm_context_set_kcl_pkgpath
// api-spec(c):    void kclvm_context_set_kcl_pkgpath(kclvm_context_t* p, int8_t* pkgpath);
// api-spec(llvm): declare void @kclvm_context_set_kcl_pkgpath(%kclvm_context_t* %p, i8* %pkgpath);

// api-spec:       kclvm_context_set_kcl_filename
// api-spec(c):    void kclvm_context_set_kcl_filename(int8_t* filename);
// api-spec(llvm): declare void @kclvm_context_set_kcl_filename(i8* %filename);

// api-spec:       kclvm_context_set_kcl_line_col
// api-spec(c):    void kclvm_context_set_kcl_line_col(int32_t line, int32_t col);
// api-spec(llvm): declare void @kclvm_context_set_kcl_line_col(i32 %line, i32 %col);

// api-spec:       kclvm_context_put_type
// api-spec(c):    void kclvm_context_put_type(kclvm_context_t* p, kclvm_type_t* typ);
// api-spec(llvm): declare void @kclvm_context_put_type(%kclvm_context_t* %p, %kclvm_type_t* %typ);

// api-spec:       kclvm_context_clear_all_types
// api-spec(c):    void kclvm_context_clear_all_types(kclvm_context_t* p);
// api-spec(llvm): declare void @kclvm_context_clear_all_types(%kclvm_context_t* %p);

// api-spec:       kclvm_context_symbol_init
// api-spec(c):    void kclvm_context_symbol_init(kclvm_context_t* p, kclvm_size_t n, kclvm_char_t** symbol_names);
// api-spec(llvm): declare void @kclvm_context_symbol_init(%kclvm_context_t* %p, %kclvm_size_t %n, %kclvm_char_t** %symbol_names);

// api-spec:       kclvm_context_symbol_num
// api-spec(c):    kclvm_size_t kclvm_context_symbol_num(kclvm_context_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_context_symbol_num(%kclvm_context_t* %p);

// api-spec:       kclvm_context_symbol_name
// api-spec(c):    kclvm_char_t* kclvm_context_symbol_name(kclvm_context_t* p, kclvm_size_t i);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_context_symbol_name(%kclvm_context_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_context_symbol_value
// api-spec(c):    kclvm_value_t* kclvm_context_symbol_value(kclvm_context_t* p, kclvm_size_t i);
// api-spec(llvm): declare %kclvm_value_t* @kclvm_context_symbol_value(%kclvm_context_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_context_args_get
// api-spec(c):    kclvm_char_t* kclvm_context_args_get(kclvm_context_t* _p, kclvm_char_t* _key);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_context_args_get(%kclvm_context_t* %_p, %kclvm_char_t* %_key);

// api-spec:       kclvm_context_args_set
// api-spec(c):    void kclvm_context_args_set(kclvm_context_t* _p, kclvm_char_t* _key, kclvm_char_t* _value);
// api-spec(llvm): declare void @kclvm_context_args_set(%kclvm_context_t* %_p, %kclvm_char_t* %_key, %kclvm_char_t* %_value);

// api-spec:       kclvm_context_args_clear
// api-spec(c):    void kclvm_context_args_clear(kclvm_context_t* p);
// api-spec(llvm): declare void @kclvm_context_args_clear(%kclvm_context_t* %p);

// api-spec:       kclvm_context_set_debug_mode
// api-spec(c):    void kclvm_context_set_debug_mode(kclvm_context_t* p, kclvm_bool_t v);
// api-spec(llvm): declare void @kclvm_context_set_debug_mode(%kclvm_context_t* %p, %kclvm_bool_t %v);

// api-spec:       kclvm_context_set_strict_range_check
// api-spec(c):    void kclvm_context_set_strict_range_check(kclvm_context_t* p, kclvm_bool_t v);
// api-spec(llvm): declare void @kclvm_context_set_strict_range_check(%kclvm_context_t* %p, %kclvm_bool_t %v);

// api-spec:       kclvm_context_set_show_hidden
// api-spec(c):    void kclvm_context_set_show_hidden(kclvm_context_t* p, kclvm_bool_t v);
// api-spec(llvm): declare void @kclvm_context_set_show_hidden(%kclvm_context_t* %p, %kclvm_bool_t %v);

// api-spec:       kclvm_context_set_disable_none
// api-spec(c):    void kclvm_context_set_disable_none(kclvm_context_t* p, kclvm_bool_t v);
// api-spec(llvm): declare void @kclvm_context_set_disable_none(%kclvm_context_t* %p, %kclvm_bool_t %v);

// api-spec:       kclvm_context_set_disable_schema_check
// api-spec(c):    void kclvm_context_set_disable_schema_check(kclvm_context_t* p, kclvm_bool_t v);
// api-spec(llvm): declare void @kclvm_context_set_disable_schema_check(%kclvm_context_t* %p, %kclvm_bool_t %v);

// api-spec:       kclvm_context_set_list_option_mode
// api-spec(c):    void kclvm_context_set_list_option_mode(kclvm_context_t* p, kclvm_bool_t v);
// api-spec(llvm): declare void @kclvm_context_set_list_option_mode(%kclvm_context_t* %p, %kclvm_bool_t %v);

// api-spec:       kclvm_context_invoke
// api-spec(c):    char* kclvm_context_invoke(kclvm_context_t* p, char* method, char* args, char* kwargs);
// api-spec(llvm): declare i8* @kclvm_context_invoke(%kclvm_context_t* %p, i8* %method, i8* %args, i8* %kwargs);

// api-spec:       kclvm_context_pkgpath_is_imported
// api-spec(c):    kclvm_bool_t kclvm_context_pkgpath_is_imported(kclvm_char_t* pkgpath);
// api-spec(llvm): declare %kclvm_bool_t @kclvm_context_pkgpath_is_imported(%kclvm_char_t* %pkgpath);

// api-spec:       kclvm_type_delete
// api-spec(c):    void kclvm_type_delete(kclvm_type_t* p);
// api-spec(llvm): declare void @kclvm_type_delete(%kclvm_type_t* %p);

// api-spec:       kclvm_type_kind
// api-spec(c):    kclvm_kind_t kclvm_type_kind(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_kind_t @kclvm_type_kind(%kclvm_type_t* %p);

// api-spec:       kclvm_type_str
// api-spec(c):    kclvm_kind_t kclvm_type_str(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_kind_t @kclvm_type_str(%kclvm_type_t* %p);

// api-spec:       kclvm_type_BoolLit_value
// api-spec(c):    kclvm_bool_t kclvm_type_BoolLit_value(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_bool_t @kclvm_type_BoolLit_value(%kclvm_type_t* %p);

// api-spec:       kclvm_type_IntLit_value
// api-spec(c):    int64_t kclvm_type_IntLit_value(kclvm_type_t* p);
// api-spec(llvm): declare i64 @kclvm_type_IntLit_value(%kclvm_type_t* %p);

// api-spec:       kclvm_type_FloatLit_value
// api-spec(c):    double kclvm_type_FloatLit_value(kclvm_type_t* p);
// api-spec(llvm): declare double @kclvm_type_FloatLit_value(%kclvm_type_t* %p);

// api-spec:       kclvm_type_StrLit_value
// api-spec(c):    kclvm_char_t* kclvm_type_StrLit_value(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_type_StrLit_value(%kclvm_type_t* %p);

// api-spec:       kclvm_type_key_type
// api-spec(c):    kclvm_type_t* kclvm_type_key_type(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_type_t* @kclvm_type_key_type(%kclvm_type_t* %p);

// api-spec:       kclvm_type_elem_type
// api-spec(c):    kclvm_type_t* kclvm_type_elem_type(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_type_t* @kclvm_type_elem_type(%kclvm_type_t* %p);

// api-spec:       kclvm_type_schema_name
// api-spec(c):    kclvm_char_t* kclvm_type_schema_name(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_type_schema_name(%kclvm_type_t* %p);

// api-spec:       kclvm_type_schema_parent_name
// api-spec(c):    kclvm_char_t* kclvm_type_schema_parent_name(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_type_schema_parent_name(%kclvm_type_t* %p);

// api-spec:       kclvm_type_schema_relaxed
// api-spec(c):    kclvm_bool_t kclvm_type_schema_relaxed(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_bool_t @kclvm_type_schema_relaxed(%kclvm_type_t* %p);

// api-spec:       kclvm_type_schema_field_num
// api-spec(c):    kclvm_size_t kclvm_type_schema_field_num(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_type_schema_field_num(%kclvm_type_t* %p);

// api-spec:       kclvm_type_schema_field_name
// api-spec(c):    kclvm_char_t* kclvm_type_schema_field_name(kclvm_type_t* p, kclvm_size_t i);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_type_schema_field_name(%kclvm_type_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_type_schema_field_type
// api-spec(c):    kclvm_type_t* kclvm_type_schema_field_type(kclvm_type_t* p, kclvm_size_t i);
// api-spec(llvm): declare %kclvm_type_t* @kclvm_type_schema_field_type(%kclvm_type_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_type_arg_num
// api-spec(c):    kclvm_size_t kclvm_type_arg_num(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_type_arg_num(%kclvm_type_t* %p);

// api-spec:       kclvm_type_arg_type
// api-spec(c):    kclvm_type_t* kclvm_type_arg_type(kclvm_type_t* p, kclvm_size_t i);
// api-spec(llvm): declare %kclvm_type_t* @kclvm_type_arg_type(%kclvm_type_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_type_return_type
// api-spec(c):    kclvm_type_t* kclvm_type_return_type(kclvm_type_t* p);
// api-spec(llvm): declare %kclvm_type_t* @kclvm_type_return_type(%kclvm_type_t* %p);

// api-spec:       kclvm_context_set_import_names
// api-spec(c):    void kclvm_context_set_import_names(kclvm_context_t* p, kclvm_value_ref_t* import_names);
// api-spec(llvm): declare void @kclvm_context_set_import_names(%kclvm_context_t* %p, %kclvm_value_ref_t* %import_names);

// api-spec:       kclvm_value_Undefined
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Undefined();
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Undefined();

// api-spec:       kclvm_value_None
// api-spec(c):    kclvm_value_ref_t* kclvm_value_None();
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_None();

// api-spec:       kclvm_value_True
// api-spec(c):    kclvm_value_ref_t* kclvm_value_True();
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_True();

// api-spec:       kclvm_value_False
// api-spec(c):    kclvm_value_ref_t* kclvm_value_False();
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_False();

// api-spec:       kclvm_value_Bool
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Bool(kclvm_bool_t v);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Bool(%kclvm_bool_t %v);

// api-spec:       kclvm_value_Int
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Int(kclvm_int_t v);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Int(%kclvm_int_t %v);

// api-spec:       kclvm_value_Float
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Float(kclvm_float_t v);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Float(%kclvm_float_t %v);

// api-spec:       kclvm_value_Unit
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Unit(kclvm_float_t v, kclvm_int_t raw, kclvm_char_t* unit);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Unit(%kclvm_float_t %v, %kclvm_int_t %raw, %kclvm_char_t* %unit);

// api-spec:       kclvm_value_Str
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Str(kclvm_char_t* v);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Str(%kclvm_char_t* %v);

// api-spec:       kclvm_value_List
// api-spec(c):    kclvm_value_ref_t* kclvm_value_List();
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_List();

// api-spec:       kclvm_value_List6
// api-spec(c):    kclvm_value_ref_t* kclvm_value_List6(kclvm_value_ref_t* v1, kclvm_value_ref_t* v2, kclvm_value_ref_t* v3, kclvm_value_ref_t* v4, kclvm_value_ref_t* v5, kclvm_value_ref_t* v6);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_List6(%kclvm_value_ref_t* %v1, %kclvm_value_ref_t* %v2, %kclvm_value_ref_t* %v3, %kclvm_value_ref_t* %v4, %kclvm_value_ref_t* %v5, %kclvm_value_ref_t* %v6);

// api-spec:       kclvm_value_List10
// api-spec(c):    kclvm_value_ref_t* kclvm_value_List10(kclvm_value_ref_t* v1, kclvm_value_ref_t* v2, kclvm_value_ref_t* v3, kclvm_value_ref_t* v4, kclvm_value_ref_t* v5, kclvm_value_ref_t* v6, kclvm_value_ref_t* v7, kclvm_value_ref_t* v8, kclvm_value_ref_t* v9, kclvm_value_ref_t* v10);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_List10(%kclvm_value_ref_t* %v1, %kclvm_value_ref_t* %v2, %kclvm_value_ref_t* %v3, %kclvm_value_ref_t* %v4, %kclvm_value_ref_t* %v5, %kclvm_value_ref_t* %v6, %kclvm_value_ref_t* %v7, %kclvm_value_ref_t* %v8, %kclvm_value_ref_t* %v9, %kclvm_value_ref_t* %v10);

// api-spec:       kclvm_value_ListN
// api-spec(c):    kclvm_value_ref_t* kclvm_value_ListN(kclvm_int_t n, kclvm_value_ref_t** elem_values);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_ListN(%kclvm_int_t %n, %kclvm_value_ref_t** %elem_values);

// api-spec:       kclvm_value_Dict
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Dict();
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Dict();

// api-spec:       kclvm_value_Schema
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Schema();
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Schema();

// api-spec:       kclvm_value_schema_with_config
// api-spec(c):    kclvm_value_ref_t* kclvm_value_schema_with_config(kclvm_value_ref_t* schema_dict, kclvm_value_ref_t* config, kclvm_value_ref_t* config_meta, kclvm_char_t* name, kclvm_char_t* pkgpath, kclvm_value_ref_t* is_sub_schema, kclvm_value_ref_t* record_instance, kclvm_value_ref_t* instance_pkgpath, kclvm_value_ref_t* optional_mapping);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_schema_with_config(%kclvm_value_ref_t* %schema_dict, %kclvm_value_ref_t* %config, %kclvm_value_ref_t* %config_meta, %kclvm_char_t* %name, %kclvm_char_t* %pkgpath, %kclvm_value_ref_t* %is_sub_schema, %kclvm_value_ref_t* %record_instance, %kclvm_value_ref_t* %instance_pkgpath, %kclvm_value_ref_t* %optional_mapping);

// api-spec:       kclvm_value_Function
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Function(uint64_t* fn_ptr, kclvm_value_ref_t* closure, kclvm_char_t* name, kclvm_bool_t is_external);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Function(i64* %fn_ptr, %kclvm_value_ref_t* %closure, %kclvm_char_t* %name, %kclvm_bool_t %is_external);

// api-spec:       kclvm_value_Function_using_ptr
// api-spec(c):    kclvm_value_ref_t* kclvm_value_Function_using_ptr(uint64_t* fn_ptr, kclvm_char_t* name);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_Function_using_ptr(i64* %fn_ptr, %kclvm_char_t* %name);

// api-spec:       kclvm_value_schema_function
// api-spec(c):    kclvm_value_ref_t* kclvm_value_schema_function(uint64_t* fn_ptr, uint64_t* check_fn_ptr, kclvm_char_t* tpe);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_schema_function(i64* %fn_ptr, i64* %check_fn_ptr, %kclvm_char_t* %tpe);

// api-spec:       kclvm_value_from_json
// api-spec(c):    kclvm_value_ref_t* kclvm_value_from_json(kclvm_char_t* s);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_from_json(%kclvm_char_t* %s);

// api-spec:       kclvm_value_to_json
// api-spec(c):    kclvm_buffer_t* kclvm_value_to_json(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_buffer_t* @kclvm_value_to_json(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_to_json_value
// api-spec(c):    kclvm_value_ref_t* kclvm_value_to_json_value(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_to_json_value(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_to_json_value_with_null
// api-spec(c):    kclvm_value_ref_t* kclvm_value_to_json_value_with_null(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_to_json_value_with_null(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_plan_to_json
// api-spec(c):    kclvm_value_ref_t* kclvm_value_plan_to_json(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_plan_to_json(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_plan_to_yaml
// api-spec(c):    kclvm_value_ref_t* kclvm_value_plan_to_yaml(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_plan_to_yaml(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_to_yaml_value
// api-spec(c):    kclvm_value_ref_t* kclvm_value_to_yaml_value(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_to_yaml_value(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_to_str_value
// api-spec(c):    kclvm_value_ref_t* kclvm_value_to_str_value(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_to_str_value(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_Bool_ptr
// api-spec(c):    kclvm_bool_t* kclvm_value_Bool_ptr(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_bool_t* @kclvm_value_Bool_ptr(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_Int_ptr
// api-spec(c):    kclvm_int_t* kclvm_value_Int_ptr(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_int_t* @kclvm_value_Int_ptr(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_Float_ptr
// api-spec(c):    kclvm_float_t* kclvm_value_Float_ptr(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_float_t* @kclvm_value_Float_ptr(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_Str_ptr
// api-spec(c):    kclvm_char_t* kclvm_value_Str_ptr(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_char_t* @kclvm_value_Str_ptr(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_Str_len
// api-spec(c):    kclvm_size_t kclvm_value_Str_len(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_value_Str_len(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_Str_resize
// api-spec(c):    void kclvm_value_Str_resize(kclvm_value_ref_t* p, kclvm_size_t n);
// api-spec(llvm): declare void @kclvm_value_Str_resize(%kclvm_value_ref_t* %p, %kclvm_size_t %n);

// api-spec:       kclvm_value_function_ptr
// api-spec(c):    uint64_t* kclvm_value_function_ptr(kclvm_value_ref_t* p);
// api-spec(llvm): declare i64* @kclvm_value_function_ptr(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_check_function_ptr
// api-spec(c):    uint64_t* kclvm_value_check_function_ptr(kclvm_value_ref_t* p);
// api-spec(llvm): declare i64* @kclvm_value_check_function_ptr(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_function_is_external
// api-spec(c):    kclvm_bool_t kclvm_value_function_is_external(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_bool_t @kclvm_value_function_is_external(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_function_external_invoke
// api-spec(c):    kclvm_value_ref_t* kclvm_value_function_external_invoke(kclvm_value_ref_t* p, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_function_external_invoke(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_value_function_invoke
// api-spec(c):    kclvm_value_ref_t* kclvm_value_function_invoke(kclvm_value_ref_t* p, kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs, kclvm_char_t* pkgpath, kclvm_value_ref_t* is_in_schema);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_function_invoke(%kclvm_value_ref_t* %p, %kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs, %kclvm_char_t* %pkgpath, %kclvm_value_ref_t* %is_in_schema);

// api-spec:       kclvm_value_function_get_closure
// api-spec(c):    kclvm_value_ref_t* kclvm_value_function_get_closure(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_function_get_closure(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_kind
// api-spec(c):    kclvm_kind_t kclvm_value_kind(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_kind_t @kclvm_value_kind(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_deep_copy
// api-spec(c):    kclvm_value_ref_t* kclvm_value_deep_copy(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_deep_copy(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_delete
// api-spec(c):    void kclvm_value_delete(kclvm_value_ref_t* p);
// api-spec(llvm): declare void @kclvm_value_delete(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_iter
// api-spec(c):    kclvm_iterator_t* kclvm_value_iter(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_iterator_t* @kclvm_value_iter(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_iterator_delete
// api-spec(c):    void kclvm_iterator_delete(kclvm_iterator_t* p);
// api-spec(llvm): declare void @kclvm_iterator_delete(%kclvm_iterator_t* %p);

// api-spec:       kclvm_iterator_is_end
// api-spec(c):    kclvm_bool_t kclvm_iterator_is_end(kclvm_iterator_t* p);
// api-spec(llvm): declare %kclvm_bool_t @kclvm_iterator_is_end(%kclvm_iterator_t* %p);

// api-spec:       kclvm_iterator_cur_key
// api-spec(c):    kclvm_value_ref_t* kclvm_iterator_cur_key(kclvm_iterator_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_iterator_cur_key(%kclvm_iterator_t* %p);

// api-spec:       kclvm_iterator_cur_value
// api-spec(c):    kclvm_value_ref_t* kclvm_iterator_cur_value(kclvm_iterator_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_iterator_cur_value(%kclvm_iterator_t* %p);

// api-spec:       kclvm_iterator_next_value
// api-spec(c):    kclvm_value_ref_t* kclvm_iterator_next_value(kclvm_iterator_t* p, kclvm_value_ref_t* host);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_iterator_next_value(%kclvm_iterator_t* %p, %kclvm_value_ref_t* %host);

// api-spec:       kclvm_list_len
// api-spec(c):    kclvm_size_t kclvm_list_len(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_list_len(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_list_resize
// api-spec(c):    void kclvm_list_resize(kclvm_value_ref_t* p, kclvm_size_t newsize);
// api-spec(llvm): declare void @kclvm_list_resize(%kclvm_value_ref_t* %p, %kclvm_size_t %newsize);

// api-spec:       kclvm_list_clear
// api-spec(c):    void kclvm_list_clear(kclvm_value_ref_t* p);
// api-spec(llvm): declare void @kclvm_list_clear(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_list_count
// api-spec(c):    kclvm_value_ref_t* kclvm_list_count(kclvm_value_ref_t* p, kclvm_value_ref_t* item);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_list_count(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %item);

// api-spec:       kclvm_list_find
// api-spec(c):    kclvm_value_ref_t* kclvm_list_find(kclvm_value_ref_t* p, kclvm_value_ref_t* item);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_list_find(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %item);

// api-spec:       kclvm_list_insert
// api-spec(c):    void kclvm_list_insert(kclvm_value_ref_t* p, kclvm_value_ref_t* index, kclvm_value_ref_t* value);
// api-spec(llvm): declare void @kclvm_list_insert(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %index, %kclvm_value_ref_t* %value);

// api-spec:       kclvm_list_get
// api-spec(c):    kclvm_value_ref_t* kclvm_list_get(kclvm_value_ref_t* p, kclvm_size_t i);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_list_get(%kclvm_value_ref_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_list_get_option
// api-spec(c):    kclvm_value_ref_t* kclvm_list_get_option(kclvm_value_ref_t* p, kclvm_size_t i);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_list_get_option(%kclvm_value_ref_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_list_set
// api-spec(c):    void kclvm_list_set(kclvm_value_ref_t* p, kclvm_size_t i, kclvm_value_ref_t* v);
// api-spec(llvm): declare void @kclvm_list_set(%kclvm_value_ref_t* %p, %kclvm_size_t %i, %kclvm_value_ref_t* %v);

// api-spec:       kclvm_list_pop
// api-spec(c):    kclvm_value_ref_t* kclvm_list_pop(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_list_pop(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_list_pop_first
// api-spec(c):    kclvm_value_ref_t* kclvm_list_pop_first(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_list_pop_first(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_list_append
// api-spec(c):    void kclvm_list_append(kclvm_value_ref_t* p, kclvm_value_ref_t* v);
// api-spec(llvm): declare void @kclvm_list_append(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %v);

// api-spec:       kclvm_list_append_bool
// api-spec(c):    void kclvm_list_append_bool(kclvm_value_ref_t* p, kclvm_bool_t v);
// api-spec(llvm): declare void @kclvm_list_append_bool(%kclvm_value_ref_t* %p, %kclvm_bool_t %v);

// api-spec:       kclvm_list_append_int
// api-spec(c):    void kclvm_list_append_int(kclvm_value_ref_t* p, kclvm_int_t v);
// api-spec(llvm): declare void @kclvm_list_append_int(%kclvm_value_ref_t* %p, %kclvm_int_t %v);

// api-spec:       kclvm_list_append_float
// api-spec(c):    void kclvm_list_append_float(kclvm_value_ref_t* p, kclvm_float_t v);
// api-spec(llvm): declare void @kclvm_list_append_float(%kclvm_value_ref_t* %p, %kclvm_float_t %v);

// api-spec:       kclvm_list_append_str
// api-spec(c):    void kclvm_list_append_str(kclvm_value_ref_t* p, kclvm_char_t* v);
// api-spec(llvm): declare void @kclvm_list_append_str(%kclvm_value_ref_t* %p, %kclvm_char_t* %v);

// api-spec:       kclvm_list_append_unpack
// api-spec(c):    void kclvm_list_append_unpack(kclvm_value_ref_t* p, kclvm_value_ref_t* v);
// api-spec(llvm): declare void @kclvm_list_append_unpack(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %v);

// api-spec:       kclvm_list_remove_at
// api-spec(c):    void kclvm_list_remove_at(kclvm_value_ref_t* p, kclvm_size_t i);
// api-spec(llvm): declare void @kclvm_list_remove_at(%kclvm_value_ref_t* %p, %kclvm_size_t %i);

// api-spec:       kclvm_dict_len
// api-spec(c):    kclvm_size_t kclvm_dict_len(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_dict_len(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_dict_clear
// api-spec(c):    void kclvm_dict_clear(kclvm_value_ref_t* p);
// api-spec(llvm): declare void @kclvm_dict_clear(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_dict_get
// api-spec(c):    kclvm_value_ref_t* kclvm_dict_get(kclvm_value_ref_t* p, kclvm_value_ref_t* key);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_dict_get(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %key);

// api-spec:       kclvm_dict_has_value
// api-spec(c):    kclvm_bool_t kclvm_dict_has_value(kclvm_value_ref_t* p, kclvm_char_t* key);
// api-spec(llvm): declare %kclvm_bool_t @kclvm_dict_has_value(%kclvm_value_ref_t* %p, %kclvm_char_t* %key);

// api-spec:       kclvm_dict_get_value
// api-spec(c):    kclvm_value_ref_t* kclvm_dict_get_value(kclvm_value_ref_t* p, kclvm_char_t* key);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_dict_get_value(%kclvm_value_ref_t* %p, %kclvm_char_t* %key);

// api-spec:       kclvm_dict_get_entry
// api-spec(c):    kclvm_value_ref_t* kclvm_dict_get_entry(kclvm_value_ref_t* p, kclvm_char_t* key);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_dict_get_entry(%kclvm_value_ref_t* %p, %kclvm_char_t* %key);

// api-spec:       kclvm_dict_get_value_by_path
// api-spec(c):    kclvm_value_ref_t* kclvm_dict_get_value_by_path(kclvm_value_ref_t* p, kclvm_char_t* path);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_dict_get_value_by_path(%kclvm_value_ref_t* %p, %kclvm_char_t* %path);

// api-spec:       kclvm_dict_set_value
// api-spec(c):    void kclvm_dict_set_value(kclvm_value_ref_t* p, kclvm_char_t* key, kclvm_value_ref_t* val);
// api-spec(llvm): declare void @kclvm_dict_set_value(%kclvm_value_ref_t* %p, %kclvm_char_t* %key, %kclvm_value_ref_t* %val);

// api-spec:       kclvm_dict_keys
// api-spec(c):    kclvm_value_ref_t* kclvm_dict_keys(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_dict_keys(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_dict_values
// api-spec(c):    kclvm_value_ref_t* kclvm_dict_values(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_dict_values(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_dict_insert
// api-spec(c):    void kclvm_dict_insert(kclvm_value_ref_t* p, kclvm_char_t* key, kclvm_value_ref_t* v, kclvm_size_t op, kclvm_size_t insert_index);
// api-spec(llvm): declare void @kclvm_dict_insert(%kclvm_value_ref_t* %p, %kclvm_char_t* %key, %kclvm_value_ref_t* %v, %kclvm_size_t %op, %kclvm_size_t %insert_index);

// api-spec:       kclvm_dict_merge
// api-spec(c):    void kclvm_dict_merge(kclvm_value_ref_t* p, kclvm_char_t* key, kclvm_value_ref_t* v, kclvm_size_t op, kclvm_size_t insert_index);
// api-spec(llvm): declare void @kclvm_dict_merge(%kclvm_value_ref_t* %p, %kclvm_char_t* %key, %kclvm_value_ref_t* %v, %kclvm_size_t %op, %kclvm_size_t %insert_index);

// api-spec:       kclvm_dict_insert_value
// api-spec(c):    void kclvm_dict_insert_value(kclvm_value_ref_t* p, kclvm_value_ref_t* key, kclvm_value_ref_t* v, kclvm_size_t op, kclvm_size_t insert_index);
// api-spec(llvm): declare void @kclvm_dict_insert_value(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %key, %kclvm_value_ref_t* %v, %kclvm_size_t %op, %kclvm_size_t %insert_index);

// api-spec:       kclvm_dict_update_key_value
// api-spec(c):    void kclvm_dict_update_key_value(kclvm_value_ref_t* p, kclvm_value_ref_t* key, kclvm_value_ref_t* v);
// api-spec(llvm): declare void @kclvm_dict_update_key_value(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %key, %kclvm_value_ref_t* %v);

// api-spec:       kclvm_dict_safe_insert
// api-spec(c):    void kclvm_dict_safe_insert(kclvm_value_ref_t* p, kclvm_char_t* key, kclvm_value_ref_t* v, kclvm_size_t op, kclvm_size_t insert_index);
// api-spec(llvm): declare void @kclvm_dict_safe_insert(%kclvm_value_ref_t* %p, %kclvm_char_t* %key, %kclvm_value_ref_t* %v, %kclvm_size_t %op, %kclvm_size_t %insert_index);

// api-spec:       kclvm_dict_insert_unpack
// api-spec(c):    void kclvm_dict_insert_unpack(kclvm_value_ref_t* p, kclvm_value_ref_t* v);
// api-spec(llvm): declare void @kclvm_dict_insert_unpack(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %v);

// api-spec:       kclvm_default_collection_insert_int_pointer
// api-spec(c):    void kclvm_default_collection_insert_int_pointer(kclvm_value_ref_t* p, kclvm_char_t* key, uint64_t* ptr);
// api-spec(llvm): declare void @kclvm_default_collection_insert_int_pointer(%kclvm_value_ref_t* %p, %kclvm_char_t* %key, i64* %ptr);

// api-spec:       kclvm_default_collection_insert_value
// api-spec(c):    void kclvm_default_collection_insert_value(kclvm_value_ref_t* p, kclvm_char_t* key, kclvm_value_ref_t* value);
// api-spec(llvm): declare void @kclvm_default_collection_insert_value(%kclvm_value_ref_t* %p, %kclvm_char_t* %key, %kclvm_value_ref_t* %value);

// api-spec:       kclvm_dict_remove
// api-spec(c):    void kclvm_dict_remove(kclvm_value_ref_t* p, kclvm_char_t* key);
// api-spec(llvm): declare void @kclvm_dict_remove(%kclvm_value_ref_t* %p, %kclvm_char_t* %key);

// api-spec:       kclvm_dict_update
// api-spec(c):    void kclvm_dict_update(kclvm_value_ref_t* p, kclvm_value_ref_t* v);
// api-spec(llvm): declare void @kclvm_dict_update(%kclvm_value_ref_t* %p, %kclvm_value_ref_t* %v);

// api-spec:       kclvm_value_is_truthy
// api-spec(c):    kclvm_bool_t kclvm_value_is_truthy(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_bool_t @kclvm_value_is_truthy(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_len
// api-spec(c):    kclvm_size_t kclvm_value_len(kclvm_value_ref_t* p);
// api-spec(llvm): declare %kclvm_size_t @kclvm_value_len(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_value_cmp_equal_to
// api-spec(c):    kclvm_value_ref_t* kclvm_value_cmp_equal_to(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_cmp_equal_to(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_cmp_not_equal_to
// api-spec(c):    kclvm_value_ref_t* kclvm_value_cmp_not_equal_to(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_cmp_not_equal_to(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_cmp_less_than
// api-spec(c):    kclvm_value_ref_t* kclvm_value_cmp_less_than(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_cmp_less_than(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_cmp_less_than_or_equal
// api-spec(c):    kclvm_value_ref_t* kclvm_value_cmp_less_than_or_equal(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_cmp_less_than_or_equal(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_cmp_greater_than
// api-spec(c):    kclvm_value_ref_t* kclvm_value_cmp_greater_than(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_cmp_greater_than(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_cmp_greater_than_or_equal
// api-spec(c):    kclvm_value_ref_t* kclvm_value_cmp_greater_than_or_equal(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_cmp_greater_than_or_equal(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_is
// api-spec(c):    kclvm_value_ref_t* kclvm_value_is(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_is(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_is_not
// api-spec(c):    kclvm_value_ref_t* kclvm_value_is_not(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_is_not(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_in
// api-spec(c):    kclvm_value_ref_t* kclvm_value_in(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_in(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_not_in
// api-spec(c):    kclvm_value_ref_t* kclvm_value_not_in(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_not_in(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_as
// api-spec(c):    kclvm_value_ref_t* kclvm_value_as(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_as(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_unary_plus
// api-spec(c):    kclvm_value_ref_t* kclvm_value_unary_plus(kclvm_value_ref_t* a);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_unary_plus(%kclvm_value_ref_t* %a);

// api-spec:       kclvm_value_unary_minus
// api-spec(c):    kclvm_value_ref_t* kclvm_value_unary_minus(kclvm_value_ref_t* a);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_unary_minus(%kclvm_value_ref_t* %a);

// api-spec:       kclvm_value_unary_not
// api-spec(c):    kclvm_value_ref_t* kclvm_value_unary_not(kclvm_value_ref_t* a);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_unary_not(%kclvm_value_ref_t* %a);

// api-spec:       kclvm_value_unary_l_not
// api-spec(c):    kclvm_value_ref_t* kclvm_value_unary_l_not(kclvm_value_ref_t* a);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_unary_l_not(%kclvm_value_ref_t* %a);

// api-spec:       kclvm_value_op_add
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_add(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_add(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_sub
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_sub(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_sub(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_mul
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_mul(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_mul(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_div
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_div(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_div(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_mod
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_mod(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_mod(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_pow
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_pow(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_pow(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_floor_div
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_floor_div(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_floor_div(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_bit_lshift
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_bit_lshift(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_bit_lshift(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_bit_rshift
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_bit_rshift(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_bit_rshift(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_bit_and
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_bit_and(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_bit_and(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_bit_xor
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_bit_xor(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_bit_xor(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_bit_or
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_bit_or(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_bit_or(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_add
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_add(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_add(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_sub
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_sub(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_sub(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_mul
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_mul(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_mul(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_div
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_div(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_div(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_mod
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_mod(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_mod(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_pow
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_pow(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_pow(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_floor_div
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_floor_div(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_floor_div(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_bit_lshift
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_bit_lshift(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_bit_lshift(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_bit_rshift
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_bit_rshift(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_bit_rshift(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_bit_and
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_bit_and(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_bit_and(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_bit_xor
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_bit_xor(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_bit_xor(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_op_aug_bit_or
// api-spec(c):    kclvm_value_ref_t* kclvm_value_op_aug_bit_or(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_op_aug_bit_or(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_union
// api-spec(c):    kclvm_value_ref_t* kclvm_value_union(kclvm_value_ref_t* schema, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_union(%kclvm_value_ref_t* %schema, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_logic_and
// api-spec(c):    kclvm_value_ref_t* kclvm_value_logic_and(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_logic_and(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_logic_or
// api-spec(c):    kclvm_value_ref_t* kclvm_value_logic_or(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_logic_or(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_subscr
// api-spec(c):    kclvm_value_ref_t* kclvm_value_subscr(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_subscr(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_subscr_option
// api-spec(c):    kclvm_value_ref_t* kclvm_value_subscr_option(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_subscr_option(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_load_attr
// api-spec(c):    kclvm_value_ref_t* kclvm_value_load_attr(kclvm_value_ref_t* obj, kclvm_char_t* key);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_load_attr(%kclvm_value_ref_t* %obj, %kclvm_char_t* %key);

// api-spec:       kclvm_value_load_attr_option
// api-spec(c):    kclvm_value_ref_t* kclvm_value_load_attr_option(kclvm_value_ref_t* p, kclvm_char_t* key);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_load_attr_option(%kclvm_value_ref_t* %p, %kclvm_char_t* %key);

// api-spec:       kclvm_value_remove_item
// api-spec(c):    void kclvm_value_remove_item(kclvm_value_ref_t* a, kclvm_value_ref_t* b);
// api-spec(llvm): declare void @kclvm_value_remove_item(%kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b);

// api-spec:       kclvm_value_slice
// api-spec(c):    kclvm_value_ref_t* kclvm_value_slice(kclvm_value_ref_t* x, kclvm_value_ref_t* a, kclvm_value_ref_t* b, kclvm_value_ref_t* step);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_slice(%kclvm_value_ref_t* %x, %kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b, %kclvm_value_ref_t* %step);

// api-spec:       kclvm_value_slice_option
// api-spec(c):    kclvm_value_ref_t* kclvm_value_slice_option(kclvm_value_ref_t* x, kclvm_value_ref_t* a, kclvm_value_ref_t* b, kclvm_value_ref_t* step);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_slice_option(%kclvm_value_ref_t* %x, %kclvm_value_ref_t* %a, %kclvm_value_ref_t* %b, %kclvm_value_ref_t* %step);

// api-spec:       kclvm_schema_backtrack_cache
// api-spec(c):    void kclvm_schema_backtrack_cache(kclvm_value_ref_t* schema, kclvm_value_ref_t* cache, kclvm_value_ref_t* cal_map, kclvm_char_t* name, kclvm_value_ref_t* runtime_type);
// api-spec(llvm): declare void @kclvm_schema_backtrack_cache(%kclvm_value_ref_t* %schema, %kclvm_value_ref_t* %cache, %kclvm_value_ref_t* %cal_map, %kclvm_char_t* %name, %kclvm_value_ref_t* %runtime_type);

// api-spec:       kclvm_schema_instances
// api-spec(c):    kclvm_value_ref_t* kclvm_schema_instances(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_schema_instances(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_schema_value_check
// api-spec(c):    void kclvm_schema_value_check(kclvm_value_ref_t* schema_value, kclvm_value_ref_t* schema_config, kclvm_value_ref_t* _config_meta, kclvm_char_t* schema_name, kclvm_value_ref_t* index_sign_value, kclvm_char_t* _key_name, kclvm_char_t* key_type, kclvm_char_t* _value_type, kclvm_bool_t _any_other, kclvm_bool_t is_relaxed);
// api-spec(llvm): declare void @kclvm_schema_value_check(%kclvm_value_ref_t* %schema_value, %kclvm_value_ref_t* %schema_config, %kclvm_value_ref_t* %_config_meta, %kclvm_char_t* %schema_name, %kclvm_value_ref_t* %index_sign_value, %kclvm_char_t* %_key_name, %kclvm_char_t* %key_type, %kclvm_char_t* %_value_type, %kclvm_bool_t %_any_other, %kclvm_bool_t %is_relaxed);

// api-spec:       kclvm_schema_do_check_with_index_sign_attr
// api-spec(c):    void kclvm_schema_do_check_with_index_sign_attr(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs, uint64_t* check_fn_ptr, kclvm_char_t* attr_name);
// api-spec(llvm): declare void @kclvm_schema_do_check_with_index_sign_attr(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs, i64* %check_fn_ptr, %kclvm_char_t* %attr_name);

// api-spec:       kclvm_schema_optional_check
// api-spec(c):    void kclvm_schema_optional_check(kclvm_value_ref_t* p);
// api-spec(llvm): declare void @kclvm_schema_optional_check(%kclvm_value_ref_t* %p);

// api-spec:       kclvm_schema_default_settings
// api-spec(c):    void kclvm_schema_default_settings(kclvm_value_ref_t* schema_value, kclvm_value_ref_t* config_value, kclvm_char_t* runtime_type);
// api-spec(llvm): declare void @kclvm_schema_default_settings(%kclvm_value_ref_t* %schema_value, %kclvm_value_ref_t* %config_value, %kclvm_char_t* %runtime_type);

// api-spec:       kclvm_schema_assert
// api-spec(c):    void kclvm_schema_assert(kclvm_value_ref_t* value, kclvm_value_ref_t* msg, kclvm_value_ref_t* config_meta);
// api-spec(llvm): declare void @kclvm_schema_assert(%kclvm_value_ref_t* %value, %kclvm_value_ref_t* %msg, %kclvm_value_ref_t* %config_meta);

// api-spec:       kclvm_schema_value_new
// api-spec(c):    kclvm_value_ref_t* kclvm_schema_value_new(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs, kclvm_value_ref_t* schema_value_or_func, kclvm_value_ref_t* config, kclvm_value_ref_t* config_meta, kclvm_char_t* pkgpath);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_schema_value_new(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs, %kclvm_value_ref_t* %schema_value_or_func, %kclvm_value_ref_t* %config, %kclvm_value_ref_t* %config_meta, %kclvm_char_t* %pkgpath);

// api-spec:       kclvm_convert_collection_value
// api-spec(c):    kclvm_value_ref_t* kclvm_convert_collection_value(kclvm_value_ref_t* value, kclvm_char_t* tpe);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_convert_collection_value(%kclvm_value_ref_t* %value, %kclvm_char_t* %tpe);

// api-spec:       kclvm_schema_get_value
// api-spec(c):    kclvm_value_ref_t* kclvm_schema_get_value(kclvm_value_ref_t* p, kclvm_char_t* key, kclvm_value_ref_t* config, kclvm_value_ref_t* config_meta, kclvm_value_ref_t* cal_map, kclvm_char_t* target_attr, kclvm_value_ref_t* backtrack_level_map, kclvm_value_ref_t* backtrack_cache, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_schema_get_value(%kclvm_value_ref_t* %p, %kclvm_char_t* %key, %kclvm_value_ref_t* %config, %kclvm_value_ref_t* %config_meta, %kclvm_value_ref_t* %cal_map, %kclvm_char_t* %target_attr, %kclvm_value_ref_t* %backtrack_level_map, %kclvm_value_ref_t* %backtrack_cache, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_config_attr_map
// api-spec(c):    void kclvm_config_attr_map(kclvm_value_ref_t* value, kclvm_char_t* name, kclvm_char_t* type_str);
// api-spec(llvm): declare void @kclvm_config_attr_map(%kclvm_value_ref_t* %value, %kclvm_char_t* %name, %kclvm_char_t* %type_str);

// api-spec:       kclvm_value_Decorator
// api-spec(c):    kclvm_decorator_value_t* kclvm_value_Decorator(kclvm_char_t* name, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs, kclvm_value_ref_t* config_meta, kclvm_char_t* attr_name, kclvm_value_ref_t* config_value, kclvm_value_ref_t* is_schema_target);
// api-spec(llvm): declare %kclvm_decorator_value_t* @kclvm_value_Decorator(%kclvm_char_t* %name, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs, %kclvm_value_ref_t* %config_meta, %kclvm_char_t* %attr_name, %kclvm_value_ref_t* %config_value, %kclvm_value_ref_t* %is_schema_target);

// api-spec:       kclvm_builtin_str_lower
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_lower(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_lower(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_upper
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_upper(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_upper(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_capitalize
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_capitalize(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_capitalize(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_count
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_count(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_count(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_endswith
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_endswith(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_endswith(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_find
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_find(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_find(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_format
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_format(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_format(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_str_index
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_index(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_index(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_isalnum
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_isalnum(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_isalnum(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_isalpha
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_isalpha(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_isalpha(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_isdigit
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_isdigit(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_isdigit(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_islower
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_islower(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_islower(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_isspace
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_isspace(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_isspace(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_istitle
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_istitle(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_istitle(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_isupper
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_isupper(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_isupper(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_join
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_join(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_join(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_lstrip
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_lstrip(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_lstrip(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_rstrip
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_rstrip(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_rstrip(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_replace
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_replace(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_replace(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_removeprefix
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_removeprefix(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_removeprefix(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_removesuffix
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_removesuffix(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_removesuffix(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_rfind
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_rfind(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_rfind(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_rindex
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_rindex(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_rindex(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_rsplit
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_rsplit(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_rsplit(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_str_split
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_split(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_split(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_str_splitlines
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_splitlines(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_splitlines(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_str_startswith
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_startswith(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_startswith(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_strip
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_strip(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_strip(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str_title
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str_title(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str_title(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_base64_encode
// api-spec(c):    kclvm_value_ref_t* kclvm_base64_encode(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_base64_encode(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_base64_decode
// api-spec(c):    kclvm_value_ref_t* kclvm_base64_decode(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_base64_decode(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_value_union_all
// api-spec(c):    kclvm_value_ref_t* kclvm_value_union_all(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_value_union_all(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_crypto_md5
// api-spec(c):    kclvm_value_ref_t* kclvm_crypto_md5(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_crypto_md5(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_crypto_sha1
// api-spec(c):    kclvm_value_ref_t* kclvm_crypto_sha1(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_crypto_sha1(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_crypto_sha224
// api-spec(c):    kclvm_value_ref_t* kclvm_crypto_sha224(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_crypto_sha224(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_crypto_sha256
// api-spec(c):    kclvm_value_ref_t* kclvm_crypto_sha256(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_crypto_sha256(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_crypto_sha384
// api-spec(c):    kclvm_value_ref_t* kclvm_crypto_sha384(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_crypto_sha384(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_crypto_sha512
// api-spec(c):    kclvm_value_ref_t* kclvm_crypto_sha512(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_crypto_sha512(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_datetime_today
// api-spec(c):    kclvm_value_ref_t* kclvm_datetime_today(kclvm_context_t* _ctx, kclvm_value_ref_t* _args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_datetime_today(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %_args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_datetime_now
// api-spec(c):    kclvm_value_ref_t* kclvm_datetime_now(kclvm_context_t* _ctx, kclvm_value_ref_t* _args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_datetime_now(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %_args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_datetime_ticks
// api-spec(c):    kclvm_value_ref_t* kclvm_datetime_ticks(kclvm_context_t* _ctx, kclvm_value_ref_t* _args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_datetime_ticks(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %_args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_datetime_date
// api-spec(c):    kclvm_value_ref_t* kclvm_datetime_date(kclvm_context_t* _ctx, kclvm_value_ref_t* _args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_datetime_date(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %_args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_json_encode
// api-spec(c):    kclvm_value_ref_t* kclvm_json_encode(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_json_encode(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_json_decode
// api-spec(c):    kclvm_value_ref_t* kclvm_json_decode(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_json_decode(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_json_dump_to_file
// api-spec(c):    kclvm_value_ref_t* kclvm_json_dump_to_file(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_json_dump_to_file(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_manifests_yaml_stream
// api-spec(c):    void kclvm_manifests_yaml_stream(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare void @kclvm_manifests_yaml_stream(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_math_ceil
// api-spec(c):    kclvm_value_ref_t* kclvm_math_ceil(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_ceil(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_factorial
// api-spec(c):    kclvm_value_ref_t* kclvm_math_factorial(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_factorial(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_floor
// api-spec(c):    kclvm_value_ref_t* kclvm_math_floor(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_floor(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_gcd
// api-spec(c):    kclvm_value_ref_t* kclvm_math_gcd(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_gcd(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_isfinite
// api-spec(c):    kclvm_value_ref_t* kclvm_math_isfinite(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_isfinite(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_isinf
// api-spec(c):    kclvm_value_ref_t* kclvm_math_isinf(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_isinf(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_isnan
// api-spec(c):    kclvm_value_ref_t* kclvm_math_isnan(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_isnan(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_modf
// api-spec(c):    kclvm_value_ref_t* kclvm_math_modf(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_modf(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_exp
// api-spec(c):    kclvm_value_ref_t* kclvm_math_exp(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_exp(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_expm1
// api-spec(c):    kclvm_value_ref_t* kclvm_math_expm1(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_expm1(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_log
// api-spec(c):    kclvm_value_ref_t* kclvm_math_log(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_log(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_log1p
// api-spec(c):    kclvm_value_ref_t* kclvm_math_log1p(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_log1p(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_log2
// api-spec(c):    kclvm_value_ref_t* kclvm_math_log2(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_log2(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_log10
// api-spec(c):    kclvm_value_ref_t* kclvm_math_log10(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_log10(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_pow
// api-spec(c):    kclvm_value_ref_t* kclvm_math_pow(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_pow(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_math_sqrt
// api-spec(c):    kclvm_value_ref_t* kclvm_math_sqrt(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_math_sqrt(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_split_host_port
// api-spec(c):    kclvm_value_ref_t* kclvm_net_split_host_port(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_split_host_port(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_join_host_port
// api-spec(c):    kclvm_value_ref_t* kclvm_net_join_host_port(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_join_host_port(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_fqdn
// api-spec(c):    kclvm_value_ref_t* kclvm_net_fqdn(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_fqdn(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_parse_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_parse_IP(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_parse_IP(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_net_to_IP4
// api-spec(c):    kclvm_value_ref_t* kclvm_net_to_IP4(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_to_IP4(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_net_to_IP16
// api-spec(c):    kclvm_value_ref_t* kclvm_net_to_IP16(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_to_IP16(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_net_IP_string
// api-spec(c):    kclvm_value_ref_t* kclvm_net_IP_string(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_IP_string(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_IPv4
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_IPv4(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_IPv4(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_IP(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_IP(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_loopback_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_loopback_IP(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_loopback_IP(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_multicast_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_multicast_IP(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_multicast_IP(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_interface_local_multicast_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_interface_local_multicast_IP(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_interface_local_multicast_IP(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_link_local_multicast_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_link_local_multicast_IP(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_link_local_multicast_IP(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_link_local_unicast_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_link_local_unicast_IP(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_link_local_unicast_IP(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_net_is_global_unicast_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_global_unicast_IP(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_global_unicast_IP(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_net_is_unspecified_IP
// api-spec(c):    kclvm_value_ref_t* kclvm_net_is_unspecified_IP(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_net_is_unspecified_IP(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_regex_match
// api-spec(c):    kclvm_value_ref_t* kclvm_regex_match(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_regex_match(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_regex_replace
// api-spec(c):    kclvm_value_ref_t* kclvm_regex_replace(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_regex_replace(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_regex_compile
// api-spec(c):    kclvm_value_ref_t* kclvm_regex_compile(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_regex_compile(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_regex_findall
// api-spec(c):    kclvm_value_ref_t* kclvm_regex_findall(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_regex_findall(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_regex_search
// api-spec(c):    kclvm_value_ref_t* kclvm_regex_search(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_regex_search(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_regex_split
// api-spec(c):    kclvm_value_ref_t* kclvm_regex_split(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_regex_split(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_assert
// api-spec(c):    void kclvm_assert(kclvm_value_ref_t* value, kclvm_value_ref_t* msg);
// api-spec(llvm): declare void @kclvm_assert(%kclvm_value_ref_t* %value, %kclvm_value_ref_t* %msg);

// api-spec:       kclvm_builtin_option_init
// api-spec(c):    void kclvm_builtin_option_init(kclvm_context_t* ctx, int8_t* key, int8_t* value);
// api-spec(llvm): declare void @kclvm_builtin_option_init(%kclvm_context_t* %ctx, i8* %key, i8* %value);

// api-spec:       kclvm_builtin_option_reset
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_option_reset(kclvm_context_t* ctx, kclvm_value_ref_t* _args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_option_reset(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %_args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_option
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_option(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_option(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_print
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_print(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_print(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_len
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_len(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_len(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_any_true
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_any_true(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_any_true(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_isunique
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_isunique(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_isunique(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_sorted
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_sorted(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_sorted(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_int
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_int(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_int(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_float
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_float(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_float(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_bool
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_bool(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_bool(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_str
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_str(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_str(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_builtin_max
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_max(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_max(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_min
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_min(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_min(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_multiplyof
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_multiplyof(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_multiplyof(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_abs
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_abs(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_abs(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_all_true
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_all_true(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_all_true(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_hex
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_hex(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_hex(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_sum
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_sum(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_sum(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_pow
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_pow(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_pow(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_round
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_round(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_round(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_zip
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_zip(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_zip(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_list
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_list(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_list(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_dict
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_dict(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_dict(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_typeof
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_typeof(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_typeof(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_bin
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_bin(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_bin(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_oct
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_oct(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_oct(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_ord
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_ord(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_ord(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_builtin_range
// api-spec(c):    kclvm_value_ref_t* kclvm_builtin_range(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_builtin_range(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_plugin_init
// api-spec(c):    void kclvm_plugin_init(void* fn_ptr);
// api-spec(llvm): declare void @kclvm_plugin_init(i8* %fn_ptr);

// api-spec:       kclvm_plugin_invoke
// api-spec(c):    kclvm_value_ref_t* kclvm_plugin_invoke(int8_t* method, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_plugin_invoke(i8* %method, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_plugin_invoke_json
// api-spec(c):    char* kclvm_plugin_invoke_json(int8_t* method, char* args, char* kwargs);
// api-spec(llvm): declare i8* @kclvm_plugin_invoke_json(i8* %method, i8* %args, i8* %kwargs);

// api-spec:       kclvm_testing_arguments
// api-spec(c):    void kclvm_testing_arguments(kclvm_context_t* _ctx, kclvm_value_ref_t* _args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare void @kclvm_testing_arguments(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %_args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_testing_setting_file
// api-spec(c):    void kclvm_testing_setting_file(kclvm_context_t* _ctx, kclvm_value_ref_t* _args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare void @kclvm_testing_setting_file(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %_args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_units_to_n
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_n(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_n(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_u
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_u(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_u(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_m
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_m(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_m(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_K
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_K(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_K(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_M
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_M(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_M(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_G
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_G(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_G(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_T
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_T(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_T(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_P
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_P(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_P(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_Ki
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_Ki(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_Ki(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_Mi
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_Mi(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_Mi(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_Gi
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_Gi(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_Gi(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_Ti
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_Ti(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_Ti(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_units_to_Pi
// api-spec(c):    kclvm_value_ref_t* kclvm_units_to_Pi(kclvm_context_t* ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_units_to_Pi(%kclvm_context_t* %ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_yaml_encode
// api-spec(c):    kclvm_value_ref_t* kclvm_yaml_encode(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_yaml_encode(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %kwargs);

// api-spec:       kclvm_yaml_decode
// api-spec(c):    kclvm_value_ref_t* kclvm_yaml_decode(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_yaml_decode(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

// api-spec:       kclvm_yaml_dump_to_file
// api-spec(c):    kclvm_value_ref_t* kclvm_yaml_dump_to_file(kclvm_context_t* _ctx, kclvm_value_ref_t* args, kclvm_value_ref_t* _kwargs);
// api-spec(llvm): declare %kclvm_value_ref_t* @kclvm_yaml_dump_to_file(%kclvm_context_t* %_ctx, %kclvm_value_ref_t* %args, %kclvm_value_ref_t* %_kwargs);

